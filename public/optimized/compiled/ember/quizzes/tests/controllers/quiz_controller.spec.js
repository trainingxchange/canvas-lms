(function(){define(["../start_app","ember","../../controllers/quiz_controller","ember-qunit","../environment_setup"],function(t,e,n,c){var s,o,i,l,u,a,r;return o=e.run,s=t(),c.setResolver(e.DefaultResolver.create({namespace:s})),r=new Date((new Date).getTime()-864e5),u=new Date((new Date).getTime()+864e5),a=new Date((new Date).getTime()+1728e5),i=function(t,e){return this.qc.get("model").set("unlockAt",t),this.qc.get("model").set("lockAt",e)},l=function(t,e,n){var c;return null==n&&(n=100),c=Math.abs(t-e)<n,null===t||null===e?equal(t,e,"both dates are null"):ok(c,""+t.toISOString()+" && "+e.toISOString()+" are close enough to be considered the same (within "+n+" ms apart)")},c.moduleFor("controller:quiz","QuizController",{setup:function(){return s=t(),c.setResolver(e.DefaultResolver.create({namespace:s})),this.model=e.Object.create({unlockAt:r,lockAt:u,save:function(){return{then:function(t){return t.call(this.model)}}}}),this.qc=this.subject(),this.qc.set("model",this.model)},teardown:function(){return o(s,"destroy")}}),c.test("sanity",function(){return ok(this.qc)}),c.test("when unlocked quiz, toggleLock calls lock",function(){var t,n,c=this;return this.qc.set("isLocked",!1),n=!1,t=this.qc._actions.lock,this.qc._actions.lock=function(){return n=!0},e.run(function(){return c.qc.send("toggleLock"),equal(n,!0),c.qc._actions.lock=t})}),c.test("lock action: sets lockAt to now",function(){return i.call(this,r,u),equal(this.qc.get("isLocked"),!1),this.qc.send("lock"),l(this.qc.get("lockAt"),new Date)}),c.test("lock action: sets dueAt to now if it doesnt exist",function(){return i.call(this,r,u),equal(this.qc.get("isLocked"),!1),this.qc.send("lock"),l(this.qc.get("dueAt"),new Date)}),c.test("lock action: doesnt sets dueAt if it exist",function(){return i.call(this,r,u),equal(this.qc.get("isLocked"),!1),this.qc.set("dueAt",r),this.qc.send("lock"),l(this.qc.get("dueAt"),r)}),c.test("lock action: sets dueAt to now if it exist, but is in the future",function(){return i.call(this,r,u),equal(this.qc.get("isLocked"),!1),this.qc.set("dueAt",u),this.qc.send("lock"),l(this.qc.get("dueAt"),new Date)}),c.test("when locked quiz, toggleLock calls unlock",function(){var t,e;return this.qc.set("isLocked",!0),e=!1,t=this.qc._actions.unlock,this.qc._actions.unlock=function(){return e=!0},this.qc.send("toggleLock"),equal(e,!0),this.qc._actions.unlock=t}),c.test("unlock action: sets unlock to now when set to something in the future",function(){return i.call(this,u,a),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("unlockAt"),new Date)}),c.test("unlock action: doesnt sets unlock when it doesnt exist",function(){return i.call(this,null,r),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("unlockAt"),null)}),c.test("unlock action: doesnt sets unlock when it is has already passed",function(){return i.call(this,r,r),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("unlockAt"),r)}),c.test("unlock action: removes lockAt when it is a past date",function(){return i.call(this,r,r),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("lockAt"),null)}),c.test("unlock action: leaves lockAt unchanged when it was already null",function(){return i.call(this,u,null),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("lockAt"),null)}),c.test("unlock action: leaves lockAt unchanged when it is a future date",function(){return i.call(this,u,a),equal(this.qc.get("isLocked"),!0),this.qc.send("unlock"),l(this.qc.get("lockAt"),a)})})}).call(this);