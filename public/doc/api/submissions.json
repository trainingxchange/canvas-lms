{
  "apiVersion": "1.0",
  "swaggerVersion": "1.2",
  "basePath": "http://localhost:3000/api",
  "resourcePath": "/submissions",
  "produces": [
    "application/json"
  ],
  "apis": [
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
      "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
      "operations": [
        {
          "method": "POST",
          "summary": "Submit an assignment",
          "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
          "nickname": "submit_assignment_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Include a textual comment with the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[submission_type]",
              "description": "The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error. The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission[submission_type] must be set to \"online_url\", otherwise the submission[url] parameter will be ignored.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording"
              ]
            },
            {
              "paramType": "form",
              "name": "submission[body]",
              "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[url]",
              "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[file_ids]",
              "description": "Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments). To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}. Requires a submission_type of \"online_upload\".",
              "type": "integer",
              "format": "int64",
              "required": false,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_id]",
              "description": "The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use. Requires a submission_type of \"media_recording\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_type]",
              "description": "The type of media comment being submitted.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
      "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
      "operations": [
        {
          "method": "POST",
          "summary": "Submit an assignment",
          "notes": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
          "nickname": "submit_assignment_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Include a textual comment with the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[submission_type]",
              "description": "The type of submission being made. The assignment submission_types must include this submission type as an allowed option, or the submission will be rejected with a 400 error. The submission_type given determines which of the following parameters is used. For instance, to submit a URL, submission[submission_type] must be set to \"online_url\", otherwise the submission[url] parameter will be ignored.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "online_text_entry",
                "online_url",
                "online_upload",
                "media_recording"
              ]
            },
            {
              "paramType": "form",
              "name": "submission[body]",
              "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet will be sanitized using the same ruleset as a submission made from the Canvas web UI. The sanitized HTML will be returned in the response as the submission body. Requires a submission_type of \"online_text_entry\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[url]",
              "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\", no \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g. \"www.example.com\") then \"http\" will be assumed. Requires a submission_type of \"online_url\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[file_ids]",
              "description": "Submit the assignment as a set of one or more previously uploaded files residing in the submitting user's files section (or the group's files section, for group assignments). To upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}. Requires a submission_type of \"online_upload\".",
              "type": "integer",
              "format": "int64",
              "required": false,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_id]",
              "description": "The media comment id to submit. Media comment ids can be submitted via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use. Requires a submission_type of \"media_recording\".",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "submission[media_comment_type]",
              "description": "The type of media comment being submitted.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions",
      "description": "Get all existing submissions for an assignment.",
      "operations": [
        {
          "method": "GET",
          "summary": "List assignment submissions",
          "notes": "Get all existing submissions for an assignment.",
          "nickname": "list_assignment_submissions_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions",
      "description": "Get all existing submissions for an assignment.",
      "operations": [
        {
          "method": "GET",
          "summary": "List assignment submissions",
          "notes": "Get all existing submissions for an assignment.",
          "nickname": "list_assignment_submissions_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/students/submissions",
      "description": "Get all existing submissions for a given set of students and assignments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List submissions for multiple assignments",
          "notes": "Get all existing submissions for a given set of students and assignments.",
          "nickname": "list_submissions_for_multiple_assignments_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "student_ids",
              "description": "List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.",
              "type": "string",
              "format": null,
              "required": true,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "query",
              "name": "assignment_ids",
              "description": "List of assignments to return submissions for. If none are given, submissions for all assignments are returned.",
              "type": "string",
              "format": null,
              "required": true,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is present, the response will be grouped by student, rather than a flat array of submissions.",
              "type": "boolean",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group. `total_scores` requires the `grouped` argument.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "total_scores"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/students/submissions",
      "description": "Get all existing submissions for a given set of students and assignments.",
      "operations": [
        {
          "method": "GET",
          "summary": "List submissions for multiple assignments",
          "notes": "Get all existing submissions for a given set of students and assignments.",
          "nickname": "list_submissions_for_multiple_assignments_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "student_ids",
              "description": "List of student ids to return submissions for. If this argument is omitted, return submissions for the calling user. Students may only list their own submissions. Observers may only list those of associated students. The special id \"all\" will return submissions for all students in the course/section as appropriate.",
              "type": "string",
              "format": null,
              "required": true,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "query",
              "name": "assignment_ids",
              "description": "List of assignments to return submissions for. If none are given, submissions for all assignments are returned.",
              "type": "string",
              "format": null,
              "required": true,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "query",
              "name": "grouped",
              "description": "If this argument is present, the response will be grouped by student, rather than a flat array of submissions.",
              "type": "boolean",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group. `total_scores` requires the `grouped` argument.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment",
                "assignment",
                "total_scores"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Get a single submission, based on user id.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single submission",
          "notes": "Get a single submission, based on user id.",
          "nickname": "get_single_submission_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Get a single submission, based on user id.",
      "operations": [
        {
          "method": "GET",
          "summary": "Get a single submission",
          "notes": "Get a single submission, based on user id.",
          "nickname": "get_single_submission_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "query",
              "name": "include",
              "description": "Associations to include with the group.",
              "type": "string",
              "format": null,
              "required": true,
              "enum": [
                "submission_history",
                "submission_comments",
                "rubric_assessment"
              ],
              "tags": {
                "type": "array"
              }
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files",
      "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
      "operations": [
        {
          "method": "POST",
          "summary": "Upload a file",
          "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
          "nickname": "upload_file_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files",
      "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
      "operations": [
        {
          "method": "POST",
          "summary": "Upload a file",
          "notes": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
          "nickname": "upload_file_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Grade or comment on a submission",
          "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
          "nickname": "grade_or_comment_on_submission_courses",
          "parameters": [
            {
              "paramType": "path",
              "name": "course_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Add a textual comment to the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[group_comment]",
              "description": "Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_id]",
              "description": "Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_type]",
              "description": "The type of media comment being added.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "comment[file_ids]",
              "description": "Attach files to this comment that were previously uploaded using the Submission Comment API's files action",
              "type": "integer",
              "format": "int64",
              "required": false,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "form",
              "name": "submission[posted_grade]",
              "description": "Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats: points:: A floating point or integral value, such as \"13.5\". The grade will be interpreted directly as the score of the assignment. Values above assignment.points_possible are allowed, for awarding extra credit. percentage:: A floating point value appended with a percent sign, such as \"40%\". The grade will be interpreted as a percentage score on the assignment, where 100% == assignment.points_possible. Values above 100% are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter grading scheme. For example, \"A-\". The resulting score will be the high end of the defined range for the letter grade. For instance, if \"B\" is defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The letter grade will be rejected if the assignment does not have a defined letter grading scheme. For more fine-grained control of scores, pass in points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\" will give a score of 100%. \"fail\" or \"incomplete\" will give a score of 0. Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "rubric_assessment",
              "description": "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric: rubric_assessment[criterion_id][points]:: The points awarded for this row. rubric_assessment[criterion_id][comments]:: Comments to add for this row. For example, if the assignment rubric is (in JSON format): !!!javascript [ { 'id': 'crit1', 'points': 10, 'description': 'Criterion 1', 'ratings': [ { 'description': 'Good', 'points': 10 }, { 'description': 'Poor', 'points': 3 } ] }, { 'id': 'crit2', 'points': 5, 'description': 'Criterion 2', 'ratings': [ { 'description': 'Complete', 'points': 5 }, { 'description': 'Incomplete', 'points': 0 } ] } ] Then a possible set of values for rubric_assessment would be: rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done.",
              "type": "rubricassessment",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    },
    {
      "path": "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}",
      "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
      "operations": [
        {
          "method": "PUT",
          "summary": "Grade or comment on a submission",
          "notes": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
          "nickname": "grade_or_comment_on_submission_sections",
          "parameters": [
            {
              "paramType": "path",
              "name": "section_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "assignment_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "path",
              "name": "user_id",
              "description": "ID",
              "type": "string",
              "format": null,
              "required": true
            },
            {
              "paramType": "form",
              "name": "comment[text_comment]",
              "description": "Add a textual comment to the submission.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[group_comment]",
              "description": "Whether or not this comment should be sent to the entire group (defaults to false). Ignored if this is not a group assignment or if no text_comment is provided.",
              "type": "boolean",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_id]",
              "description": "Add an audio/video comment to the submission. Media comments can be added via this API, however, note that there is not yet an API to generate or list existing media comments, so this functionality is currently of limited use.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "comment[media_comment_type]",
              "description": "The type of media comment being added.",
              "type": "string",
              "format": null,
              "required": false,
              "enum": [
                "audio",
                "video"
              ]
            },
            {
              "paramType": "form",
              "name": "comment[file_ids]",
              "description": "Attach files to this comment that were previously uploaded using the Submission Comment API's files action",
              "type": "integer",
              "format": "int64",
              "required": false,
              "tags": {
                "type": "array"
              }
            },
            {
              "paramType": "form",
              "name": "submission[posted_grade]",
              "description": "Assign a score to the submission, updating both the \"score\" and \"grade\" fields on the submission record. This parameter can be passed in a few different formats: points:: A floating point or integral value, such as \"13.5\". The grade will be interpreted directly as the score of the assignment. Values above assignment.points_possible are allowed, for awarding extra credit. percentage:: A floating point value appended with a percent sign, such as \"40%\". The grade will be interpreted as a percentage score on the assignment, where 100% == assignment.points_possible. Values above 100% are allowed, for awarding extra credit. letter grade:: A letter grade, following the assignment's defined letter grading scheme. For example, \"A-\". The resulting score will be the high end of the defined range for the letter grade. For instance, if \"B\" is defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The letter grade will be rejected if the assignment does not have a defined letter grading scheme. For more fine-grained control of scores, pass in points or percentage rather than the letter grade. \"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\" will give a score of 100%. \"fail\" or \"incomplete\" will give a score of 0. Note that assignments with grading_type of \"pass_fail\" can only be assigned a score of 0 or assignment.points_possible, nothing inbetween. If a posted_grade in the \"points\" or \"percentage\" format is sent, the grade will only be accepted if the grade equals one of those two values.",
              "type": "string",
              "format": null,
              "required": false
            },
            {
              "paramType": "form",
              "name": "rubric_assessment",
              "description": "Assign a rubric assessment to this assignment submission. The sub-parameters here depend on the rubric for the assignment. The general format is, for each row in the rubric: rubric_assessment[criterion_id][points]:: The points awarded for this row. rubric_assessment[criterion_id][comments]:: Comments to add for this row. For example, if the assignment rubric is (in JSON format): !!!javascript [ { 'id': 'crit1', 'points': 10, 'description': 'Criterion 1', 'ratings': [ { 'description': 'Good', 'points': 10 }, { 'description': 'Poor', 'points': 3 } ] }, { 'id': 'crit2', 'points': 5, 'description': 'Criterion 2', 'ratings': [ { 'description': 'Complete', 'points': 5 }, { 'description': 'Incomplete', 'points': 0 } ] } ] Then a possible set of values for rubric_assessment would be: rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done.",
              "type": "rubricassessment",
              "format": null,
              "required": false
            }
          ],
          "type": "void"
        }
      ]
    }
  ],
  "models": {
    "MediaComment": {
      "id": "MediaComment",
      "description": "",
      "required": [

      ],
      "properties": {
        "content-type": {
          "example": "audio/mp4",
          "type": "string"
        },
        "display_name": {
          "example": "something",
          "type": "string"
        },
        "media_id": {
          "example": "3232",
          "type": "string"
        },
        "media_type": {
          "example": "audio",
          "type": "string"
        },
        "url": {
          "example": "http://example.com/media_url",
          "type": "string"
        }
      }
    },
    "SubmissionComment": {
      "id": "SubmissionComment",
      "description": "",
      "required": [

      ],
      "properties": {
        "id": {
          "example": 37,
          "type": "integer"
        },
        "author_id": {
          "example": 134,
          "type": "integer"
        },
        "author_name": {
          "example": "Toph Beifong",
          "type": "string"
        },
        "comment": {
          "example": "Well here's the thing...",
          "type": "string"
        },
        "created_at": {
          "example": "2012-01-01T01:00:00Z",
          "type": "datetime"
        },
        "media_comment": {
          "$ref": "MediaComment"
        }
      }
    },
    "Submission": {
      "id": "Submission",
      "description": "",
      "required": [

      ],
      "properties": {
        "assignment_id": {
          "description": "The submission's assignment id",
          "example": 23,
          "type": "integer"
        },
        "assignment": {
          "description": "The submission's assignment (see the assignments API) (optional)",
          "example": "Assignment",
          "type": "string"
        },
        "course": {
          "description": "The submission's course (see the course API) (optional)",
          "example": "Course",
          "type": "string"
        },
        "attempt": {
          "description": "This is the submission attempt number.",
          "example": 1,
          "type": "integer"
        },
        "body": {
          "description": "The content of the submission, if it was submitted directly in a text field.",
          "example": "There are three factors too...",
          "type": "string"
        },
        "grade": {
          "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
          "example": "A-",
          "type": "string"
        },
        "grade_matches_current_submission": {
          "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
          "example": true,
          "type": "boolean"
        },
        "html_url": {
          "description": "URL to the submission. This will require the user to log in.",
          "example": "http://example.com/courses/255/assignments/543/submissions/134",
          "type": "string"
        },
        "preview_url": {
          "description": "URL to the submission preview. This will require the user to log in.",
          "example": "http://example.com/courses/255/assignments/543/submissions/134?preview=1",
          "type": "string"
        },
        "score": {
          "description": "The raw score",
          "example": 13.5,
          "type": "float"
        },
        "submission_comments": {
          "description": "Associated comments for a submission (optional)",
          "type": "array",
          "items": {
            "$ref": "SubmissionComment"
          }
        },
        "submission_type": {
          "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording')",
          "example": "online_text_entry",
          "type": "string",
          "allowableValues": {
            "values": [
              "online_text_entry",
              "online_url",
              "online_upload",
              "media_recording"
            ]
          }
        },
        "submitted_at": {
          "description": "The timestamp when the assignment was submitted",
          "example": "2012-01-01T01:00:00Z",
          "type": "datetime"
        },
        "url": {
          "description": "The URL of the submission (for 'online_url' submissions).",
          "type": "string"
        },
        "user_id": {
          "description": "The id of the user who created the submission",
          "example": 134,
          "type": "integer"
        },
        "grader_id": {
          "description": "The id of the user who graded the submission",
          "example": 86,
          "type": "integer"
        },
        "user": {
          "description": "The submissions user (see user API) (optional)",
          "example": "User",
          "type": "string"
        },
        "late": {
          "description": "Whether the submission was made after the applicable due date",
          "example": false,
          "type": "boolean"
        }
      }
    }
  }
}
